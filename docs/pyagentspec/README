# Building the docs

To build the docs, use `make html`.

Note: the project should be installed in editable mode. Please refer
to [the main README.md](../README.md).

## Serving the docs locally for advanced testing

to generate the docs locally

```bash
make clean
make html
```

Then serve the docs using

```bash
python -m http.server 8000 --directory build/html
```

To test the effect of the test version selector first go to the desired page THEN select
the version using the test version selector, e.g. at `http://localhost:8000/build/html/index.html`

# Writing the docs

When adding new functionality, ask yourself whether it should be part
of the API for users of the `pyagentspec` library. If not, it should probably be marked
as non-public with a leading underscore (`_foo`). In this case, it will
not be included in the generated documentation.

All public classes, methods and functions should have a docstring,
ideally following the [numpydoc
standard](https://numpydoc.readthedocs.io/en/latest/example.html).

To add a new public class or module in the documentation, add an
`autoclass` or `automodule` command in the `.rst` files inside the
`docs/source/` folder.

Additional notes:

-    Accurate type annotations will improve the documentation.
     Optionally, it is also possible to provide a parameter type in the
     docstring, which overrides the type annotation. This is usually
     not necessary.
-    Default parameter values are automatically included in the
     documentation. They don't need to be added in the docstring.
-    Check the generated PDF to see if your docstring is rendered nicely.
     (The PDF docs sometimes render worse than the HTML docs.)

## Step documentation

Use the below template for the docstring comment on your step class
if you added a new step to the package.

### Class docstring

*Describe the model in a few sentences.* Mention

References & Links:

> Provide any link to a relevant paper, Wikipedia article,
> GitHub repository, Python library that we use.

### `__init__` docstring

Step parameters:

> List of parameters of the step and short explanation of
> each parameter. It may be useful to also mention which
> parameters lead to change of inputs/outputs of the step or not.
>
> For example:
>
> ```
> Parameters
> ----------
> param_1 :
>     Specifies ... and will add an input X per entry ... . This can be
>     useful for ...
> ```
