# Copyright (C) 2024, 2025 Oracle and/or its affiliates.
#
# This software is under the Universal Permissive License
# (UPL) 1.0 (LICENSE-UPL or https://oss.oracle.com/licenses/upl) or Apache License
# 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0), at your option.

from typing import Any, Dict, Type

import pytest
from pydantic import ValidationError
from pydantic.json_schema import JsonSchemaValue

from pyagentspec import AgentSpecDeserializer, AgentSpecSerializer
from pyagentspec.flows.nodes import StartNode
from pyagentspec.property import (
    BooleanProperty,
    DictProperty,
    FloatProperty,
    IntegerProperty,
    ListProperty,
    NullProperty,
    NumberProperty,
    ObjectProperty,
    Property,
    StringProperty,
    UnionProperty,
    json_schema_is_castable_to,
    json_schemas_have_same_type,
    value_is_of_compatible_type,
)


@pytest.mark.parametrize(
    "property_cls,property_kwargs",
    [
        (Property, {"json_schema": {"title": "Hello\nWorld"}}),
        (StringProperty, {"title": "Hello World"}),
        (BooleanProperty, {"title": 'don"t'}),
        (IntegerProperty, {"title": "don't"}),
        (FloatProperty, {"title": "}"}),
        (NumberProperty, {"title": "}"}),
        (NullProperty, {"title": "don,t"}),
        (UnionProperty, {"title": "{", "any_of": [StringProperty(title="a"), NullProperty()]}),
        (ListProperty, {"title": 'don"t', "item_type": StringProperty(title="c")}),
        (DictProperty, {"title": 'don"t', "value_type": StringProperty(title="d")}),
        (ObjectProperty, {"title": 'don"t', "properties": {"key": StringProperty(title="val")}}),
        (
            Property,
            {
                "json_schema": {
                    "title": "some_good_title",
                    "anyOf": [
                        {"type": "null"},
                        {"type": "string", "title": "some bad title"},
                    ],
                }
            },
        ),
        (
            Property,
            {
                "json_schema": {
                    "title": "some_good_title",
                    "type": "array",
                    "items": {"type": "string", "title": "some bad title"},
                }
            },
        ),
        (
            Property,
            {
                "json_schema": {
                    "title": "some_good_title",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "good_property": {"type": ["integer", "null"], "title": "good_title"},
                            "bad_property": {"type": "string", "title": "bad title"},
                        },
                    },
                }
            },
        ),
    ],
)
def test_properties_reject_titles_with_special_characters(
    property_cls: Type[Property], property_kwargs: Dict[str, Any]
) -> None:
    with pytest.raises(
        ValueError,
        match=r"Titles of properties should not contain special characters or blank space\. Found:",
    ):
        property_cls(**property_kwargs)


def test_unexpected_attribute_of_property_raises_exception() -> None:
    with pytest.raises(ValidationError, match="Extra inputs are not permitted"):
        Property(
            json_schema={"title": "some_good_title", "type": "string"},
            nonexisting_attribute="error!",  # type: ignore
        )


@pytest.mark.parametrize(
    "outputs",
    [
        {
            "description": "Raw text generated by the LLM",
            "title": "generated_text",
            "type": "string",
        },
        {
            "json_schema": {
                "description": "Raw text generated by the LLM",
                "title": "generated_text",
                "type": "string",
            },
        },
    ],
)
def test_properties_with_disaggregated_configuration_get_deserialized_correctly(
    outputs: Dict[str, str],
) -> None:
    from pyagentspec.flows.nodes import LlmNode
    from pyagentspec.serialization import AgentSpecDeserializer, AgentSpecSerializer

    llm_node_config = {
        "branches": ["next"],
        "description": None,
        "id": "88765420-00ec-47ca-b34b-40fe5c2f932e",
        "inputs": [],
        "llm_config": {
            "model_id": "foo",
            "name": "MyVllmConfig",
            "url": "foo",
            "component_type": "VllmConfig",
        },
        "prompt_template": "Hello World",
        "name": "LlmNode",
        "outputs": [outputs],
    }

    llm_node = LlmNode.build_from_partial_config(llm_node_config)
    validation_errors = LlmNode.get_validation_errors(llm_node_config)
    assert len(validation_errors) == 0

    serializer = AgentSpecSerializer()
    deserializer = AgentSpecDeserializer()
    serialized_node = serializer.to_yaml(llm_node)
    deserialized_node = deserializer.from_yaml(serialized_node)
    assert deserialized_node == llm_node


@pytest.mark.parametrize(
    "property_cls, init_kwargs",
    [
        (NullProperty, {"title": "mystring", "default": None}),
        (StringProperty, {"title": "mystring", "default": "abc"}),
        (StringProperty, {"title": "mystring", "default": 123}),
        (IntegerProperty, {"title": "myproperty", "default": 12}),
        (IntegerProperty, {"title": "myproperty", "default": 12.34}),
        (IntegerProperty, {"title": "myproperty", "default": True}),
        (FloatProperty, {"title": "myproperty", "default": 12}),
        (NumberProperty, {"title": "myproperty", "default": 12.34}),
        (FloatProperty, {"title": "myproperty", "default": True}),
        (BooleanProperty, {"title": "myproperty", "default": 12}),
        (BooleanProperty, {"title": "myproperty", "default": 12.34}),
        (BooleanProperty, {"title": "myproperty", "default": True}),
        (
            UnionProperty,
            {"title": "myproperty", "any_of": [IntegerProperty(), FloatProperty()], "default": 1},
        ),
        (
            UnionProperty,
            {
                "title": "myproperty",
                "any_of": [IntegerProperty(), NumberProperty()],
                "default": 1.3,
            },
        ),
        (ListProperty, {"title": "myproperty", "item_type": IntegerProperty(), "default": []}),
        (
            ListProperty,
            {"title": "myproperty", "item_type": IntegerProperty(), "default": [1, 2.3, 4]},
        ),
        (DictProperty, {"title": "myproperty", "value_type": IntegerProperty(), "default": {}}),
        (
            DictProperty,
            {
                "title": "myproperty",
                "value_type": IntegerProperty(),
                "default": {"a": 1, "b": True},
            },
        ),
        (
            ObjectProperty,
            {
                "title": "myproperty",
                "properties": {"a": IntegerProperty(), "b": StringProperty()},
                "default": {"a": 1, "b": "a"},
            },
        ),
    ],
)
def test_property_default_value_with_right_type_works(property_cls, init_kwargs) -> None:
    property_ = property_cls(**init_kwargs)
    assert property_.default == init_kwargs["default"]


@pytest.mark.parametrize(
    "property_cls, init_kwargs",
    [
        (NullProperty, {"title": "mystring", "default": "a"}),
        (IntegerProperty, {"title": "myproperty", "default": "abc"}),
        (IntegerProperty, {"title": "myproperty", "default": [1, 2]}),
        (IntegerProperty, {"title": "myproperty", "default": {"a": 1}}),
        (FloatProperty, {"title": "myproperty", "default": "abc"}),
        (FloatProperty, {"title": "myproperty", "default": [1, 2]}),
        (NumberProperty, {"title": "myproperty", "default": {"a": 1}}),
        (BooleanProperty, {"title": "myproperty", "default": "abc"}),
        (BooleanProperty, {"title": "myproperty", "default": [1, 2]}),
        (BooleanProperty, {"title": "myproperty", "default": {"a": 1}}),
        (
            UnionProperty,
            {
                "title": "myproperty",
                "any_of": [IntegerProperty(), FloatProperty()],
                "default": "abc",
            },
        ),
        (
            UnionProperty,
            {
                "title": "myproperty",
                "any_of": [IntegerProperty(), NumberProperty()],
                "default": [1, 2.3],
            },
        ),
        (ListProperty, {"title": "myproperty", "item_type": IntegerProperty(), "default": "a"}),
        (
            ListProperty,
            {"title": "myproperty", "item_type": IntegerProperty(), "default": ["a", "b"]},
        ),
        (DictProperty, {"title": "myproperty", "value_type": IntegerProperty(), "default": "a"}),
        (
            DictProperty,
            {"title": "myproperty", "value_type": IntegerProperty(), "default": {"a": "b"}},
        ),
        (
            ObjectProperty,
            {
                "title": "myproperty",
                "properties": {"a": IntegerProperty(), "b": StringProperty()},
                "default": [],
            },
        ),
        (
            ObjectProperty,
            {
                "title": "myproperty",
                "properties": {"a": IntegerProperty(), "b": StringProperty()},
                "default": {"a": 1, "c": "a"},
            },
        ),
        (
            ObjectProperty,
            {
                "title": "myproperty",
                "properties": {"a": IntegerProperty(), "b": StringProperty()},
                "default": {"b": 1, "a": "a"},
            },
        ),
    ],
)
def test_property_default_value_with_wrong_type_fails(property_cls, init_kwargs) -> None:
    with pytest.raises(ValueError, match="The type of the default value of property"):
        _ = property_cls(**init_kwargs)


@pytest.mark.parametrize(
    "property_cls,init_kwargs",
    [
        (StringProperty, {"title": "mystring"}),
        (StringProperty, {"json_schema": {"title": "mystring", "type": "string"}}),
        (BooleanProperty, {"title": "mybool"}),
        (BooleanProperty, {"json_schema": {"title": "mybool", "type": "boolean"}}),
        (IntegerProperty, {"title": "myint"}),
        (IntegerProperty, {"json_schema": {"title": "myint", "type": "integer"}}),
        (FloatProperty, {"title": "myfloat"}),
        (NumberProperty, {"title": "myfloat"}),
        (FloatProperty, {"json_schema": {"title": "myfloat", "type": "number"}}),
        (NullProperty, {"title": "mynull"}),
        (NullProperty, {"json_schema": {"title": "mynull", "type": "null"}}),
        (
            UnionProperty,
            {"title": "myunion", "any_of": [StringProperty(title="a"), IntegerProperty(title="b")]},
        ),
        (
            Property,
            {
                "json_schema": {
                    "title": "myunion",
                    "anyOf": [{"type": "string", "title": "a"}, {"type": "integer", "title": "b"}],
                }
            },
        ),
        (ListProperty, {"title": "mylist", "item_type": StringProperty(title="elt")}),
        (
            Property,
            {
                "json_schema": {
                    "title": "mylist",
                    "type": "array",
                    "items": {"type": "string", "title": "elt"},
                }
            },
        ),
        (DictProperty, {"title": "mydict", "value_type": IntegerProperty(title="val")}),
        (
            Property,
            {
                "json_schema": {
                    "title": "mydict",
                    "type": "object",
                    "additionalProperties": {"type": "integer", "title": "val"},
                    "properties": {},
                }
            },
        ),
        (
            ObjectProperty,
            {"title": "myobj", "properties": {"foo": BooleanProperty(title="foo_bool")}},
        ),
        (
            Property,
            {
                "json_schema": {
                    "title": "myobj",
                    "type": "object",
                    "properties": {"foo": {"type": "boolean", "title": "foo_bool"}},
                }
            },
        ),
        (Property, {"json_schema": {"title": "mysimple", "type": "string"}}),
    ],
)
def test_property_can_be_serialized_and_deserialized(property_cls, init_kwargs):
    property_ = property_cls(**init_kwargs)

    node = StartNode(inputs=[property_], name="")

    serialized_component = AgentSpecSerializer().to_yaml(node)
    deserialized_component = AgentSpecDeserializer().from_yaml(serialized_component)

    deserialized_property = deserialized_component.inputs[0]

    assert deserialized_property.json_schema == property_.json_schema
    assert deserialized_property.title == property_.title
    assert deserialized_property.description == property_.description
    assert deserialized_property.default == property_.default


@pytest.mark.parametrize(
    "json_schema_a, json_schema_b, expected_match",
    [
        (StringProperty(title="p_a").json_schema, StringProperty(title="p_a").json_schema, True),
        (StringProperty(title="p_a").json_schema, StringProperty(title="p_b").json_schema, True),
        (StringProperty(title="p_a").json_schema, NumberProperty(title="p_b").json_schema, False),
        (
            StringProperty(title="p_a").json_schema,
            DictProperty(value_type=StringProperty(title="p_a")).json_schema,
            False,
        ),
        (
            StringProperty(title="p_a").json_schema,
            UnionProperty(any_of=[StringProperty(title="p_b")]).json_schema,
            True,
        ),
        (
            StringProperty(title="p_a").json_schema,
            UnionProperty(any_of=[FloatProperty(title="p_b")]).json_schema,
            False,
        ),
        (
            StringProperty(title="p_a", default="a").json_schema,
            StringProperty(title="p_b", default="b").json_schema,
            True,
        ),
        (
            StringProperty(title="p_a", description="desc_a").json_schema,
            StringProperty(title="p_b").json_schema,
            True,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(item_type=StringProperty(title="p_b")).json_schema,
            True,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(item_type=FloatProperty(title="p_b")).json_schema,
            False,
        ),
        (
            ObjectProperty(properties={"a": StringProperty(), "b": NumberProperty()}).json_schema,
            ObjectProperty(
                properties={"b": FloatProperty(title="p_b"), "a": StringProperty(default="a")}
            ).json_schema,
            True,
        ),
        (
            DictProperty(value_type=StringProperty()).json_schema,
            DictProperty(value_type=StringProperty(title="p_b")).json_schema,
            True,
        ),
        (
            DictProperty(value_type=StringProperty()).json_schema,
            DictProperty(value_type=NumberProperty(title="p_b")).json_schema,
            False,
        ),
        (
            DictProperty(value_type=DictProperty(value_type=StringProperty())).json_schema,
            DictProperty(
                value_type=DictProperty(value_type=StringProperty(title="p_b"))
            ).json_schema,
            True,
        ),
        (
            DictProperty(value_type=DictProperty(value_type=StringProperty())).json_schema,
            DictProperty(
                value_type=DictProperty(value_type=FloatProperty(title="p_b"))
            ).json_schema,
            False,
        ),
        (
            DictProperty(
                value_type=ListProperty(
                    item_type=ObjectProperty(
                        properties={"a": StringProperty(), "b": NumberProperty()}
                    )
                )
            ).json_schema,
            DictProperty(
                title="d",
                default={},
                value_type=ListProperty(
                    description="desc",
                    default=[],
                    item_type=ObjectProperty(
                        properties={
                            "b": NumberProperty(title="p_b"),
                            "a": StringProperty(title="p_a"),
                        }
                    ),
                ),
            ).json_schema,
            True,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(item_type=FloatProperty(title="p_b")).json_schema,
            False,
        ),
        (
            UnionProperty(any_of=[StringProperty(), FloatProperty()]).json_schema,
            UnionProperty(any_of=[NumberProperty(), StringProperty()]).json_schema,
            True,
        ),
        (
            UnionProperty(any_of=[StringProperty(), FloatProperty()]).json_schema,
            UnionProperty(any_of=[FloatProperty(), IntegerProperty()]).json_schema,
            False,
        ),
        (
            UnionProperty(
                any_of=[
                    StringProperty(),
                    NumberProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                ]
            ).json_schema,
            UnionProperty(
                any_of=[
                    FloatProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                    StringProperty(),
                ]
            ).json_schema,
            True,
        ),
        (
            UnionProperty(
                any_of=[
                    StringProperty(),
                    FloatProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                ]
            ).json_schema,
            UnionProperty(any_of=[FloatProperty(), StringProperty()]).json_schema,
            False,
        ),
        (
            {"type": ["number", "string"]},
            {"anyOf": [{"type": "number"}, {"type": "string"}]},
            True,
        ),
        (
            {"type": ["number", "string"]},
            {"anyOf": [{"type": "integer"}, {"type": "string"}]},
            False,
        ),
        (
            {
                "type": ["number", "string", "integer"],
                "anyOf": [
                    {"type": "number", "default": 1},
                    {"type": "string", "description": "desc"},
                    {"type": "integer"},
                ],
            },
            {"anyOf": [{"type": "number"}, {"type": "string"}, {"type": "integer"}]},
            True,
        ),
    ],
)
def test_json_schemas_have_same_type(
    json_schema_a: JsonSchemaValue, json_schema_b: JsonSchemaValue, expected_match: bool
) -> None:
    assert json_schemas_have_same_type(json_schema_a, json_schema_b) == expected_match


@pytest.mark.parametrize(
    "json_schema_a, json_schema_b, expected_match",
    [
        (StringProperty(title="p_a").json_schema, StringProperty(title="p_b").json_schema, True),
        (StringProperty(title="p_a").json_schema, FloatProperty(title="p_b").json_schema, False),
        (
            StringProperty(title="p_a").json_schema,
            DictProperty(value_type=StringProperty(title="p_a")).json_schema,
            False,
        ),
        (
            StringProperty(title="p_a").json_schema,
            UnionProperty(any_of=[StringProperty(title="p_b")]).json_schema,
            True,
        ),
        (
            StringProperty(title="p_a").json_schema,
            UnionProperty(any_of=[NumberProperty(title="p_b")]).json_schema,
            False,
        ),
        (
            StringProperty(title="p_a", default="a").json_schema,
            StringProperty(title="p_b", default="b").json_schema,
            True,
        ),
        (
            StringProperty(title="p_a", description="desc_a").json_schema,
            StringProperty(title="p_b").json_schema,
            True,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(item_type=StringProperty(title="p_b")).json_schema,
            True,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(item_type=FloatProperty(title="p_b")).json_schema,
            False,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(
                item_type=UnionProperty(any_of=[StringProperty(), FloatProperty(title="p_b")])
            ).json_schema,
            True,
        ),
        # 10
        (
            ObjectProperty(properties={"a": StringProperty(), "b": FloatProperty()}).json_schema,
            ObjectProperty(
                properties={"b": NumberProperty(title="p_b"), "a": StringProperty(default="a")}
            ).json_schema,
            True,
        ),
        (
            DictProperty(value_type=StringProperty()).json_schema,
            DictProperty(value_type=StringProperty(title="p_b")).json_schema,
            True,
        ),
        (
            DictProperty(value_type=StringProperty()).json_schema,
            DictProperty(
                value_type=UnionProperty(any_of=[StringProperty(), NumberProperty(title="p_b")])
            ).json_schema,
            True,
        ),
        (
            DictProperty(value_type=StringProperty()).json_schema,
            DictProperty(value_type=NumberProperty(title="p_b")).json_schema,
            False,
        ),
        (
            DictProperty(value_type=DictProperty(value_type=StringProperty())).json_schema,
            DictProperty(
                value_type=DictProperty(value_type=StringProperty(title="p_b"))
            ).json_schema,
            True,
        ),
        (
            DictProperty(value_type=DictProperty(value_type=StringProperty())).json_schema,
            DictProperty(
                value_type=DictProperty(value_type=NumberProperty(title="p_b"))
            ).json_schema,
            False,
        ),
        (
            DictProperty(value_type=DictProperty(value_type=StringProperty())).json_schema,
            DictProperty(
                value_type=UnionProperty(
                    any_of=[
                        DictProperty(value_type=StringProperty(title="p_b")),
                        DictProperty(value_type=FloatProperty(title="p_b")),
                    ]
                )
            ).json_schema,
            True,
        ),
        (
            ListProperty(item_type=StringProperty()).json_schema,
            ListProperty(item_type=FloatProperty(title="p_b")).json_schema,
            False,
        ),
        (
            UnionProperty(any_of=[FloatProperty()]).json_schema,
            UnionProperty(any_of=[NumberProperty(), StringProperty()]).json_schema,
            True,
        ),
        (
            NumberProperty().json_schema,
            UnionProperty(any_of=[FloatProperty(), StringProperty()]).json_schema,
            True,
        ),
        # 20
        (
            UnionProperty(any_of=[StringProperty(), FloatProperty()]).json_schema,
            UnionProperty(any_of=[FloatProperty(), IntegerProperty()]).json_schema,
            False,
        ),
        (
            UnionProperty(
                any_of=[
                    StringProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                ]
            ).json_schema,
            UnionProperty(
                any_of=[
                    FloatProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                    StringProperty(),
                ]
            ).json_schema,
            True,
        ),
        (
            UnionProperty(
                any_of=[
                    StringProperty(),
                    FloatProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                ]
            ).json_schema,
            UnionProperty(any_of=[NumberProperty(), StringProperty()]).json_schema,
            True,
        ),
        (
            {"type": ["string"]},
            {"anyOf": [{"type": "number"}, {"type": "string"}]},
            True,
        ),
        (
            {"type": ["number", "string"]},
            {"anyOf": [{"type": "integer"}, {"type": "string"}]},
            True,
        ),
        (
            {
                "type": ["number", "string"],
                "anyOf": [
                    {"type": "number", "default": 1},
                ],
            },
            {"anyOf": [{"type": "number"}, {"type": "string"}]},
            True,
        ),
        (
            {
                "type": ["array"],
                "items": {"type": "number", "default": 1},
            },
            {"anyOf": [{"type": "array", "items": {"type": "number"}}, {"type": "string"}]},
            True,
        ),
        # 27
        (
            {
                "type": "array",
                "items": {"type": "number", "default": 1},
            },
            {"anyOf": [{"type": "array", "items": {"type": "integer"}}, {"type": "number"}]},
            True,
        ),
    ],
)
def test_json_schema_is_castable_to(
    json_schema_a: JsonSchemaValue, json_schema_b: JsonSchemaValue, expected_match: bool
) -> None:
    assert json_schema_is_castable_to(json_schema_a, json_schema_b) == expected_match


@pytest.mark.parametrize(
    "value, json_schema, expected_match",
    [
        (None, NullProperty(title="p_b").json_schema, True),
        ("hello!", NullProperty(title="p_b").json_schema, False),
        ("hello!", StringProperty(title="p_b").json_schema, True),
        ("hello!", Property(json_schema={"title": "p_b", "type": "string"}).json_schema, True),
        (12, Property(json_schema={"title": "p_b", "type": "number"}).json_schema, True),
        (12, Property(json_schema={"title": "p_b", "type": "array"}).json_schema, False),
        (None, StringProperty(title="p_b").json_schema, True),
        (123, FloatProperty(title="p_b").json_schema, True),
        ("test", FloatProperty(title="p_b").json_schema, False),
        (
            "test!",
            DictProperty(value_type=StringProperty(title="p_a")).json_schema,
            False,
        ),
        # 10
        (
            "test",
            UnionProperty(any_of=[StringProperty(title="p_b")]).json_schema,
            True,
        ),
        (
            None,
            UnionProperty(any_of=[IntegerProperty(), NullProperty()]).json_schema,
            True,
        ),
        (
            "test",
            UnionProperty(any_of=[NumberProperty(title="p_b")]).json_schema,
            False,
        ),
        (
            "test",
            StringProperty(title="p_b", default="b").json_schema,
            True,
        ),
        (
            ["a", "b", "cdef"],
            ListProperty(item_type=StringProperty(title="p_b")).json_schema,
            True,
        ),
        (
            [1.2, "a", 3, True],
            ListProperty(item_type=FloatProperty(title="p_b")).json_schema,
            False,
        ),
        (
            [1.2, 4, 3, True],
            ListProperty(item_type=NumberProperty(title="p_b")).json_schema,
            True,
        ),
        (
            [1.2, "a", 3, True],
            ListProperty(
                item_type=UnionProperty(any_of=[StringProperty(), FloatProperty(title="p_b")])
            ).json_schema,
            True,
        ),
        (
            {"a": "test", "b": 23.45},
            ObjectProperty(
                properties={"b": NumberProperty(title="p_b"), "a": StringProperty(default="a")}
            ).json_schema,
            True,
        ),
        (
            {"a": "test", "b": 23.45},
            DictProperty(
                value_type=UnionProperty(any_of=[StringProperty(), FloatProperty(title="p_b")])
            ).json_schema,
            True,
        ),
        # 20
        (
            {"a": "test", "b": 23.45, "c": 123},
            DictProperty(
                value_type=UnionProperty(any_of=[IntegerProperty(), FloatProperty(title="p_b")])
            ).json_schema,
            False,
        ),
        (
            {"a": "test", "b": "abc"},
            DictProperty(value_type=NumberProperty(title="p_b")).json_schema,
            False,
        ),
        (
            [1, 3, 4],
            DictProperty(value_type=FloatProperty(title="p_b")).json_schema,
            False,
        ),
        (
            {"a": {"b": "abc"}, "b": {}},
            DictProperty(
                value_type=DictProperty(value_type=StringProperty(title="p_b"))
            ).json_schema,
            True,
        ),
        (
            {"a": {"b": "abc"}, "b": {}},
            DictProperty(
                value_type=DictProperty(value_type=FloatProperty(title="p_b"))
            ).json_schema,
            False,
        ),
        (
            {"a": {"b": 123}, "b": {}},
            DictProperty(
                value_type=DictProperty(value_type=NumberProperty(title="p_b"))
            ).json_schema,
            True,
        ),
        (
            {"a": {"b": "abc"}, "b": {"c": 123}},
            DictProperty(
                value_type=UnionProperty(
                    any_of=[
                        DictProperty(value_type=StringProperty(title="p_b")),
                        DictProperty(value_type=FloatProperty(title="p_b")),
                    ]
                )
            ).json_schema,
            True,
        ),
        (
            {"a": {"b": "abc", "c": 123}, "b": {}},
            DictProperty(
                value_type=UnionProperty(
                    any_of=[
                        DictProperty(value_type=StringProperty(title="p_b")),
                        DictProperty(value_type=FloatProperty(title="p_b")),
                    ]
                )
            ).json_schema,
            True,  # Because everything is compatible with string
        ),
        (
            {"a": {"b": "abc", "c": 123}, "b": {}},
            DictProperty(
                value_type=UnionProperty(
                    any_of=[
                        DictProperty(value_type=IntegerProperty(title="p_b")),
                        DictProperty(value_type=FloatProperty(title="p_b")),
                    ]
                )
            ).json_schema,
            False,
        ),
        (
            12,
            UnionProperty(
                any_of=[
                    NumberProperty(),
                    UnionProperty(any_of=[IntegerProperty()]),
                    StringProperty(),
                ]
            ).json_schema,
            True,
        ),
        # 30
        (
            "abc",
            UnionProperty(any_of=[FloatProperty(), StringProperty()]).json_schema,
            True,
        ),
        (
            12,
            {"anyOf": [{"type": "number"}, {"type": "string"}]},
            True,
        ),
        (
            "abc",
            {"anyOf": [{"type": "integer"}, {"type": "string"}]},
            True,
        ),
        (
            "hello!",
            {
                "type": ["number", "string"],
                "anyOf": [
                    {"type": "number", "default": 1},
                ],
            },
            True,
        ),
        (
            [1, 2, 3, 4],
            {"anyOf": [{"type": "array", "items": {"type": "number"}}, {"type": "string"}]},
            True,
        ),
        (
            [],
            {"anyOf": [{"type": "array", "items": {"type": "number"}}, {"type": "string"}]},
            True,
        ),
        (
            ["test"],
            {"anyOf": [{"type": "array", "items": {"type": "number"}}, {"type": "string"}]},
            True,  # Because also the array is compatible with string
        ),
        (
            ["test"],
            {"anyOf": [{"type": "array", "items": {"type": "number"}}, {"type": "integer"}]},
            False,
        ),
    ],
)
def test_value_is_compatible_with_type(
    value: Any, json_schema: JsonSchemaValue, expected_match: bool
) -> None:
    assert value_is_of_compatible_type(value, json_schema) == expected_match
