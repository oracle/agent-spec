===========================================================
How to Specify the Generation Configuration when Using LLMs
===========================================================

Generation parameters, such as temperature, top-p, and the maximum number of output tokens,
are useful for achieving the desired performance with Large Language Models (LLMs).
In Agent Spec, these parameters can be configured in the ``default_generation_parameters``
of the :class:`LlmConfig`.

This guide will show you how to:

- Configure the generation parameters for an agent.
- Configure the generation parameters for a flow.

.. note::
    For a deeper understanding of the impact of each generation parameter, refer to the resources at the bottom of this page.

Configure the generation parameters for an agent
================================================

Customizing the generation configuration for an agent requires to specify the generation configuration of the
llm used by the agent.

In ``pyagentspec``, the generation configuration can be specified when creating an :ref:`LlmConfig <llmconfig>` using the
:ref:`LlmGenerationConfig <llmgenerationconfig>` class.
This ensures that all the outputs generated by the agent will have the same generation configuration.

The :ref:`LlmGenerationConfig <llmgenerationconfig>` is transformed into a dictionary during serialization.
The class is defined containing the following attributes, to refer to some of the most common and widely
supported generation parameters, but it allows arbitrary entries.

- ``max_new_tokens``: controls the maximum numbers of tokens to generate, ignoring the number of tokens in the prompt;
- ``temperature``: controls the randomness of the output;
- ``top_p``: controls the randomness of the output.

.. literalinclude:: ../code_examples/howto_generation_config.py
    :language: python
    :start-after: .. generation_config:
    :end-before: .. end-generation_config

Agent Spec supports LLM configurations for several providers.
You can pass the ``generation_config`` for each of them.

.. literalinclude:: ../code_examples/howto_generation_config.py
    :language: python
    :start-after: .. vllm_config:
    :end-before: .. end-vllm_config

.. important::
    API keys should not be stored anywhere in the Agent Spec representation of an agent.

Now, you can build an agent using the LLM as follows:

.. literalinclude:: ../code_examples/howto_generation_config.py
    :language: python
    :start-after: .. agent:
    :end-before: .. end-agent

Configure the generation parameters for a flow
==============================================

Customizing the generation configuration for a flow requires to specify the generation configuration of the
llm used by a node.

Refer to the previous section to learn how to configure the generation parameters when initializing an LLM using the :class:`LlmGenerationConfig` class.

For example, you can then create a one-step flow using the :class:`LlmNode` with custom generation parameters as follows.

.. literalinclude:: ../code_examples/howto_generation_config.py
    :language: python
    :start-after: .. flow:
    :end-before: .. end-flow

Recap
=====

In this guide, you learned how to configure generation parameters for an agent or a flow.

.. collapse:: Below is the complete code from this guide.

    .. literalinclude:: ../code_examples/howto_generation_config.py
        :language: python
        :start-after: .. recap:
        :end-before: .. end-recap

Next steps
==========

Having learned how to specify the generation configuration, you may now proceed to:

- :doc:`How to Use LLMs from Different LLM Providers <howto_llm_from_different_providers>`
- :doc:`How to Build an Agent with Remote Tools <howto_agent_with_remote_tools>`
- :doc:`How to Develop a Flow with Conditional Branches <howto_flow_with_conditional_branches>`

Some additional resources we recommend:

- `HuggingFace - Generation with LLMs <https://huggingface.co/docs/transformers/llm_tutorial>`_
- `HuggingFace - Text generation strategies <https://huggingface.co/docs/transformers/generation_strategies>`_
