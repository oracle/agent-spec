===============================================
How to Develop a Flow with Conditional Branches
===============================================

This guide demonstrates how to:

1. Define properties to document the input and output types of nodes in a flow
2. Configure an LLM model
3. Define different types of nodes for a flow
4. Define edges for controlling the flow (including branching and loops) and passing data between nodes
5. Define a flow and export its Agent Spec configuration

The example illustrates an assistant which generates code, reviews the generated code, and either submits or regenerates it based on the review.
This flow pattern can be applied to other use cases.

Basic implementation
=====================

1. Define properties
--------------------

Properties are used to annotate node configurations with the expected input and output types.
This helps enforce data consistency throughout the flow.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-properties:
    :end-before: .. end-define-properties:

API Reference: :ref:`Property <property>`

2. Define the LLM model
-----------------------

Flows typically contain nodes that rely on messages generated by a Large Language Model (LLM).
To define these nodes, you must provide the LLM configuration.
Several backend options are supported, including the `OCI Generative AI service <https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/>`_ or a self-hosted model using vLLM.

.. include:: ../_components/llm_config_tabs.rst

API Reference: :ref:`VllmConfig <vllmconfig>`

3. Define nodes
---------------

The ``StartNode`` specifies the expected input values, while the ``EndNode`` defines the outputs returned upon successful execution of the flow.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-start-end-nodes:
    :end-before: .. end-define-start-end-nodes:

API Reference: :ref:`StartNode <startnode>` and :ref:`EndNode <endnode>`

Nodes of type ``LlmNode`` are configured with a prompt and an ``LlmConfig`` to generate a new message from a language model.
This message is based on the prompt.
The generated message can be, for example, code or a review of previously generated code, as shown in the examples below:

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-generate-review-nodes:
    :end-before: .. end-define-generate-review-nodes:

API Reference: :ref:`LlmNode <llmnode>`

A ``BranchingNode`` can take different paths through the execution of a flow.
In the example below, it is used in conjunction with an ``LlmNode`` that evaluates whether the generated code should be accepted or regenerated.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-branching-nodes:
    :end-before: .. end-define-branching-nodes:

API Reference: :ref:`StartNode <startnode>` and :ref:`EndNode <endnode>`

4. Define the control and data flow edges
-----------------------------------------

There are two types of edges in a flow:

- ``ControlFlowEdges`` control the sequence of nodes that gets executed.
- ``DataFlowEdges`` define how data is passed from one node to another.

This manner of defining control and data flow edges allows for advanced behaviors such as conditional branching and looping, as illustrated in the example below.

In the control edges defined below, notice that two edges are connected to the ``BranchingNode`` (``is_code_ready_branching_to_end_control_edge``) due to the two possible branches of the node.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-control-edges:
    :end-before: .. end-define-control-edges:

API Reference: :ref:`ControlFlowEdge <controlflowedge>`

In the data edges below, note that the ``code`` output from the ``generate_code_node`` is passed to three different nodes:

- ``end_node`` - because the generated code is the final output of the flow.
- ``generate_code_node`` itself - to include previously generated code in the prompt and improve the next version.
- ``review_code_node`` - because the generated code is used to generate a code review.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-data-edges:
    :end-before: .. end-define-data-edges:

API Reference: :ref:`DataFlowEdge <dataflowedge>`

5. Define and export the Flow
-----------------------------

With all nodes and edges defined, you can now assemble them into a complete flow.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. define-flow:
    :end-before: .. end-define-flow:

The Agent Spec configuration is generated in JSON format.
It can be loaded into any Agent Spec-compatible system, such as the `WayFlow <https://github.com/oracle/wayflow>`_ runtime.
See, for example, :doc:`How to Execute Agent Spec Configuration with WayFlow <howto_execute_agentspec_with_wayflow>`.

.. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
    :language: python
    :start-after: .. export-serialization:
    :end-before: .. end-export-serialization:

API Reference: :ref:`AgentSpecSerializer <serialize>`


Here is what the **Agent Spec representation will look like â†“**

.. collapse:: Click here to see the assistant configuration.

   .. tabs::

      .. tab:: JSON

         .. literalinclude:: ../agentspec_config_examples/howto_flow_with_conditional_branches.json
            :language: json

      .. tab:: YAML

         .. literalinclude:: ../agentspec_config_examples/howto_flow_with_conditional_branches.yaml
            :language: yaml


Recap
=====

This how-to guide covered how to:

- Define properties to document the input and output types of nodes in a flow
- Configure an LLM model
- Define different types of nodes for a flow
- Define edges for controlling the flow (including branching and loops) and passing data between nodes
- Define a flow and export its Agent Spec configuration

.. collapse:: Below is the complete code from this guide.

    .. literalinclude:: ../code_examples/howto_flow_with_conditional_branches.py
        :language: python
        :linenos:
        :start-after: .. full-code:
        :end-before: .. end-full-code:


Next steps
==========

Having learned how to develop a flow with conditional branches, you may now proceed to :doc:`How to Execute Agent Spec Configuration with WayFlow <howto_execute_agentspec_with_wayflow>`.
